#!/usr/bin/env python
# coding: utf-8

import argparse
import datetime
import os
import pprint
import sys
from typing import Dict, List

from tsc.fetcher import TeacherScheduleFetcher
import tsc.log
from tsc.mailer import Mailer
from tsc.models import DB, Schedule
from tsc.tracker import Tracker


def create_argument_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(
        prog=os.path.basename(__file__),
        description="Teacher schedule fetcher.",
        conflict_handler="resolve"
    )
    p.add_argument(
        "-d", "--dry-run", action="store_true", default=None,
        help="Do not update database.",
    )
    p.add_argument(
        "-l", "--log-level", metavar="LEVEL",
        help="Log level (Default: info)",
    )
    return p


if __name__ == "__main__":
    envs = {}
    for env_name in ("APP_ID", "CLEARDB_DATABASE_URL", "TEACHER_IDS"):
        env_value = os.environ.get(env_name)
        if not env_value:
            raise EnvironmentError("Environment '{0}' is not defined.".format(env_name))
        envs[env_name] = env_value

    teacher_ids = envs["TEACHER_IDS"].split(",")
    if not teacher_ids:
        print("TEACHER_IDS is empty, exiting.", file=sys.stderr)
        sys.exit(1)
    arg_parser = create_argument_parser()
    options = arg_parser.parse_args(sys.argv[1:])
    options_dict = options.__dict__  # type: Dict
    logger = tsc.log.initialize(options_dict.get("log_level"))
    fetcher = TeacherScheduleFetcher()  # type: TeacherScheduleFetcher
    tracker = Tracker(envs["APP_ID"])  # Tracker
    try:
        conn = DB.connect(envs["CLEARDB_DATABASE_URL"])
        db = DB(conn)
        schedule_text = ""
        teachers = {}
        schedules_per_teachers = {}
        tracker_futures = []
        for teacher_id in teacher_ids:
            logger.debug("--- teacher_id = {} ---".format(teacher_id))
            teacher, new_schedules = fetcher.fetch(teacher_id)
            logger.debug("name = {}".format(teacher.name))
            db.update_teacher(teacher)

            from_date = datetime.date.today()
            to_date = from_date + datetime.timedelta(days=6)
            old_schedules = db.find_schedules(teacher_id, from_date, to_date)  # type: List[Schedule]
            logger.debug("old_schedules = " + pprint.pformat(old_schedules))
            logger.debug("new_schedules = " + pprint.pformat(new_schedules))

            reservable_schedules = Schedule.get_new_reservable_schedules(old_schedules, new_schedules)
            logger.debug("--- reservable_schedules ---")
            logger.debug(pprint.pformat(reservable_schedules))
            teachers[teacher_id] = teacher
            schedules_per_teachers[teacher_id] = reservable_schedules
            if not options_dict.get("dry_run"):
                db.update_schedules(new_schedules)
            tracker_futures.append(tracker.send_async(teacher))

        # TODO: Use template engine
        mail_text = ""
        teacher_name_text = ""
        for teacher_id in sorted(schedules_per_teachers):
            schedules = schedules_per_teachers[teacher_id]
            if schedules:
                teacher_name = teachers[teacher_id].name
                teacher_name_text += teacher_name + ", "
                mail_text += "--- Teacher '{0}' reservable schedule ---\n".format(teacher_name)
                mail_text += "PC: http://eikaiwa.dmm.com/teacher/index/{0}/\n".format(teacher_id)
                mail_text += "Mobile: http://eikaiwa.dmm.com/teacher/schedule/{0}/\n".format(teacher_id)
                mail_text += "\n"
                for s in schedules:
                    mail_text += "  " + s.datetime
                    mail_text += "\n"
                mail_text += "\n"
        teacher_name_text = teacher_name_text[:-2]
        if mail_text:
            #print("--- mail_text ---")
            #print(mail_text)
            notification_emails = os.environ.get("NOTIFICATION_EMAILS")
            if not notification_emails:
                raise (EnvironmentError("Env 'NOTIFICATION_EMAILS' is not defined."))
            logger.debug("Sending email to {0}".format(notification_emails))
            mailer = Mailer(  # Mailer
                os.environ.get("SENDGRID_USERNAME"),
                os.environ.get("SENDGRID_PASSWORD"),
            )
            mailer.send_multi(
                from_address="noreply@lampetty.net",
                to_addresses=notification_emails.split(","),
                subject="[DMMEikaiwa] Reservable schedules of Teacher {0}".format(teacher_name_text),
                body=mail_text,
            )
        for future in tracker_futures:
            logger.debug("tracker result = {}".format(future.result()))
    finally:
        fetcher.close()
        tracker.close()
        if conn:
            conn.close()

