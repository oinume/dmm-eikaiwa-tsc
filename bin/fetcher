#!/usr/bin/env python

import datetime
import os
import pprint
import sendgrid
import sys
import xml.sax.saxutils
#from typing import List


# TODO: Make setup.py
def set_lib_path(file):
    parent, bin = os.path.split(os.path.dirname(os.path.abspath(file)))
    for dir in ('lib', ''):
        path = os.path.join(parent, dir)
        if os.path.exists(path):
            sys.path.insert(0, path)
    return parent, bin


parent_dir, bin_dir = set_lib_path(__file__)
import tsc.fetcher
from tsc.models import connect, DBMapper, Schedule

if __name__ == "__main__":
    teacher_ids_str = os.environ.get("TEACHER_IDS")
    if not teacher_ids_str:
        raise(EnvironmentError("Env 'TEACHER_IDS' is not defined."))
    teacher_ids = teacher_ids_str.split(",")
    if not teacher_ids:
        print("TEACHER_IDS is empty, exiting.", file=sys.stderr)
        sys.exit(1)
    fetcher = tsc.fetcher.TeacherScheduleFetcher()
    try:
        conn = connect()
        db = DBMapper(conn)
        schedule_text = ""
        for teacher_id in teacher_ids:
            print("teacher_id = {}".format(teacher_id))
            teacher, new_schedules = fetcher.fetch(teacher_id)
            print("{teacher.name}".format(**locals()))
            db.update_teacher(teacher)

            # TODO: fetch db schedules and then compare
            from_date = datetime.date.today()
            to_date = from_date + datetime.timedelta(days=6)
            old_schedules = db.find_schedules(teacher_id, from_date, to_date)  # type: List[Schedule]
            pprint.pprint(old_schedules)
            print("---")
            pprint.pprint(new_schedules)

            reservable_schedules = Schedule.get_new_reservable_schedules(old_schedules, new_schedules)
            print("--- reservable_schedules ---")
            pprint.pprint(reservable_schedules)
            if reservable_schedules:
                # TODO: dict
                schedule_text += "--- {0}({1}) schedule ---".format(teacher.name, teacher.id)
                schedule_text += "\n"
                schedule_text += pprint.pformat(reservable_schedules)

            # db.update_schedules(new_schedules)

        # TODO: APIKEY
        sendgrid_client = sendgrid.SendGridClient(
            os.environ.get("SENDGRID_USERNAME"),
            os.environ.get("SENDGRID_PASSWORD"),
        )
        mail = sendgrid.Mail()
        mail.add_to("oinume@gmail.com")
        mail.set_from("oinume@gmail.com")
        mail.set_subject("DMM Eikaiwa teacher's schedule")
        schedule_text = xml.sax.saxutils.escape(schedule_text)
        mail.set_html(schedule_text.replace("\n", "<br>"))
        sendgrid_client.send(mail)
    finally:
        fetcher.close()
        if conn:
            conn.close()
